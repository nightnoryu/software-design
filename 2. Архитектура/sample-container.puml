@startuml Recipe Web App. Диаграмма контейнеров

' C4
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' Sprites
!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.4.0
!includeurl ICONURL/common.puml

' limit text width
skinparam wrapWidth 250
skinparam wrapMessageWidth 200

'
title "Recipe Web App. Диаграмма контейнеров"


' Personas 
Person(personUser, "Пользователь", "Просматривает, добавляет и комментирует рецепты.")
Person(personAdmin, "Админ", "Управляет рецептами, пользователями и комментариями.")


System_Boundary(systemRecipe, "Веб-приложение для рецептов") {

    ' Client Apps
    Container(clientWebApp, "Веб-интерфейс", "Chrome 80+, IE 11+/Edge, Safari 12+; SPA на ReactJS", "Предоставляет интерфейс для просмотра, добавления и комментирования рецептов.")
        personUser --> clientWebApp : "Просмотр, добавление и комментирование рецептов"
        
    Container(clientAdminPanel, "Панель администратора", "Chrome 80+, IE 11+/Edge, Safari 12+; SPA на ReactJS", "Управление рецептами, пользователями и комментариями.")
        personAdmin --> clientAdminPanel : "Управляет рецептами, пользователями и комментариями."

    ' Server Services
    Container(apiGateway, "API Gateway", "Ingress Controller | Nginx", "Маршрутизация запросов к сервисам.")
        clientWebApp --> apiGateway : "API-вызовы\n[HTTPS, REST]"
        clientAdminPanel --> apiGateway : "API-вызовы\n[HTTPS, REST]"

    Container(serviceAuth, "Сервис аутентификации", "KeyCloak; Java", "Управляет аутентификацией и авторизацией.")
        apiGateway --> serviceAuth : "Аутентификация и авторизация\n[HTTP; Веб-интерфейс / REST]" 
    ContainerDb(rdbAuth, "Схема auth", "PostgreSQL 12+", "Данные пользователей.")
        serviceAuth --> rdbAuth : "[Native; TCP/IP]"

    Container(serviceRecipes, "Сервис рецептов", "Kotlin", "Управление рецептами и комментариями.")
        apiGateway --> serviceRecipes : "[HTTP; REST]"
    ContainerDb(rdbRecipes, "Схема recipes", "PostgreSQL 12+", "Данные рецептов и комментариев.")
        serviceRecipes --> rdbRecipes : "[Native; TCP/IP]"
    ContainerDb(storageRecipes, "Файловое хранилище", "SeaweedFS", "Фотографии рецептов.")
        serviceRecipes --> storageRecipes : "[S3; HTTPS]"


    ContainerQueue(eventBus, "Шина событий", "RabbitMQ", "Маршрутизация сообщений между сервисами.")
        serviceRecipes ---> eventBus : "Pub/sub\n[AMQP]"
}

' External Services
Container_Ext(extEmail, "Email Сервис", "generic", "Отправка уведомлений.")
    serviceAuth ---> extEmail : "[SMTP+TLS]"

@enduml
